{"ast":null,"code":"import { createMovieFailure, createMovieStart, createMovieSuccess, getMoviesStart, getMoviesFailure, getMoviesSuccess, deleteMovieStart, deleteMovieSuccess, deleteMovieFailure, updateMovieStart, updateMovieFailure, updateMovieSuccess } from \"../movieContext/MovieActions\";\n// import axios from \"axios\";\n\n// export const getMovies = async (dispatch) => {\n// \tdispatch(getMoviesStart());\n// \ttry {\n// \t\tconst res = await axios.get(\"/movies\", {\n// \t\t\theaders: {\n// \t\t\t\ttoken: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\n// \t\t\t},\n// \t\t});\n// \t\tdispatch(getMoviesSuccess(res.data));\n// \t} catch (err) {\n// \t\tdispatch(getMoviesFailure());\n// \t}\n// };\n\n// //create\n// export const createMovie = async (movie, dispatch) => {\n// \tdispatch(createMovieStart());\n// \ttry {\n// \t\tconst res = await axios.post(\"/movies\", movie, {\n// \t\t\theaders: {\n// \t\t\t\ttoken: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\n// \t\t\t},\n// \t\t});\n// \t\tdispatch(createMovieSuccess(res.data));\n// \t} catch (err) {\n// \t\tdispatch(createMovieFailure());\n// \t}\n// };\n\n// //delete\n// export const deleteMovie = async (id, dispatch) => {\n// \tdispatch(deleteMovieStart());\n// \ttry {\n// \t\tawait axios.delete(\"/movies/\" + id, {\n// \t\t\theaders: {\n// \t\t\t\ttoken: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\n// \t\t\t},\n// \t\t});\n// \t\tdispatch(deleteMovieSuccess(id));\n// \t} catch (err) {\n// \t\tdispatch(deleteMovieFailure());\n// \t}\n\n// };\n\nimport axios from \"axios\";\nexport const getMovies = async dispatch => {\n  dispatch(getMoviesStart());\n  try {\n    const res = await axios.get(\"/movies\");\n    dispatch(getMoviesSuccess(res.data));\n  } catch (err) {\n    dispatch(getMoviesFailure());\n  }\n};\n\n//create\nexport const createMovie = async (movie, dispatch) => {\n  dispatch(createMovieStart());\n  try {\n    const res = await axios.post(\"/movies\", movie);\n    dispatch(createMovieSuccess(res.data));\n  } catch (err) {\n    dispatch(createMovieFailure());\n  }\n};\n\n//delete\nexport const deleteMovie = async (id, dispatch) => {\n  dispatch(deleteMovieStart());\n  try {\n    await axios.delete(\"/movies/\" + id);\n    dispatch(deleteMovieSuccess(id));\n  } catch (err) {\n    dispatch(deleteMovieFailure());\n  }\n};\n// Update\nexport const updateMovie = async (id, updatedMovie, dispatch) => {\n  dispatch(updateMovieStart());\n  try {\n    const res = await axios.put(\"/movies/\" + id, updatedMovie);\n    dispatch(updateMovieSuccess(res.data));\n  } catch (err) {\n    dispatch(updateMovieFailure());\n  }\n};","map":{"version":3,"names":["createMovieFailure","createMovieStart","createMovieSuccess","getMoviesStart","getMoviesFailure","getMoviesSuccess","deleteMovieStart","deleteMovieSuccess","deleteMovieFailure","updateMovieStart","updateMovieFailure","updateMovieSuccess","axios","getMovies","dispatch","res","get","data","err","createMovie","movie","post","deleteMovie","id","delete","updateMovie","updatedMovie","put"],"sources":["C:/Users/sofiy/Downloads/Streamify-main/Streamify-main/admin/src/context/movieContext/apiCalls.js"],"sourcesContent":["import {\r\n\tcreateMovieFailure,\r\n\tcreateMovieStart,\r\n\tcreateMovieSuccess,\r\n\tgetMoviesStart,\r\n\tgetMoviesFailure,\r\n\tgetMoviesSuccess,\r\n\tdeleteMovieStart,\r\n\tdeleteMovieSuccess,\r\n\tdeleteMovieFailure,\r\n\tupdateMovieStart,\r\n\tupdateMovieFailure,\r\n\tupdateMovieSuccess\r\n} from \"../movieContext/MovieActions\";\r\n// import axios from \"axios\";\r\n\r\n// export const getMovies = async (dispatch) => {\r\n// \tdispatch(getMoviesStart());\r\n// \ttry {\r\n// \t\tconst res = await axios.get(\"/movies\", {\r\n// \t\t\theaders: {\r\n// \t\t\t\ttoken: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n// \t\t\t},\r\n// \t\t});\r\n// \t\tdispatch(getMoviesSuccess(res.data));\r\n// \t} catch (err) {\r\n// \t\tdispatch(getMoviesFailure());\r\n// \t}\r\n// };\r\n\r\n// //create\r\n// export const createMovie = async (movie, dispatch) => {\r\n// \tdispatch(createMovieStart());\r\n// \ttry {\r\n// \t\tconst res = await axios.post(\"/movies\", movie, {\r\n// \t\t\theaders: {\r\n// \t\t\t\ttoken: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n// \t\t\t},\r\n// \t\t});\r\n// \t\tdispatch(createMovieSuccess(res.data));\r\n// \t} catch (err) {\r\n// \t\tdispatch(createMovieFailure());\r\n// \t}\r\n// };\r\n\r\n// //delete\r\n// export const deleteMovie = async (id, dispatch) => {\r\n// \tdispatch(deleteMovieStart());\r\n// \ttry {\r\n// \t\tawait axios.delete(\"/movies/\" + id, {\r\n// \t\t\theaders: {\r\n// \t\t\t\ttoken: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n// \t\t\t},\r\n// \t\t});\r\n// \t\tdispatch(deleteMovieSuccess(id));\r\n// \t} catch (err) {\r\n// \t\tdispatch(deleteMovieFailure());\r\n// \t}\r\n\r\n// };\r\n\r\n\r\nimport axios from \"axios\";\r\n\r\nexport const getMovies = async (dispatch) => {\r\n  dispatch(getMoviesStart());\r\n  try {\r\n    const res = await axios.get(\"/movies\");\r\n    dispatch(getMoviesSuccess(res.data));\r\n  } catch (err) {\r\n    dispatch(getMoviesFailure());\r\n  }\r\n};\r\n\r\n//create\r\nexport const createMovie = async (movie, dispatch) => {\r\n  dispatch(createMovieStart());\r\n  try {\r\n    const res = await axios.post(\"/movies\", movie);\r\n    dispatch(createMovieSuccess(res.data));\r\n  } catch (err) {\r\n    dispatch(createMovieFailure());\r\n  }\r\n};\r\n\r\n//delete\r\nexport const deleteMovie = async (id, dispatch) => {\r\n  dispatch(deleteMovieStart());\r\n  try {\r\n    await axios.delete(\"/movies/\" + id);\r\n    dispatch(deleteMovieSuccess(id));\r\n  } catch (err) {\r\n    dispatch(deleteMovieFailure());\r\n  }\r\n};\r\n// Update\r\nexport const updateMovie = async (id, updatedMovie, dispatch) => {\r\n\tdispatch(updateMovieStart());\r\n\ttry {\r\n\t  const res = await axios.put(\"/movies/\" + id, updatedMovie);\r\n\t  dispatch(updateMovieSuccess(res.data));\r\n\t} catch (err) {\r\n\t  dispatch(updateMovieFailure());\r\n\t}\r\n  };"],"mappings":"AAAA,SACCA,kBAAkB,EAClBC,gBAAgB,EAChBC,kBAAkB,EAClBC,cAAc,EACdC,gBAAgB,EAChBC,gBAAgB,EAChBC,gBAAgB,EAChBC,kBAAkB,EAClBC,kBAAkB,EAClBC,gBAAgB,EAChBC,kBAAkB,EAClBC,kBAAkB,QACZ,8BAA8B;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,SAAS,GAAG,MAAOC,QAAQ,IAAK;EAC3CA,QAAQ,CAACX,cAAc,CAAC,CAAC,CAAC;EAC1B,IAAI;IACF,MAAMY,GAAG,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,SAAS,CAAC;IACtCF,QAAQ,CAACT,gBAAgB,CAACU,GAAG,CAACE,IAAI,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZJ,QAAQ,CAACV,gBAAgB,CAAC,CAAC,CAAC;EAC9B;AACF,CAAC;;AAED;AACA,OAAO,MAAMe,WAAW,GAAG,MAAAA,CAAOC,KAAK,EAAEN,QAAQ,KAAK;EACpDA,QAAQ,CAACb,gBAAgB,CAAC,CAAC,CAAC;EAC5B,IAAI;IACF,MAAMc,GAAG,GAAG,MAAMH,KAAK,CAACS,IAAI,CAAC,SAAS,EAAED,KAAK,CAAC;IAC9CN,QAAQ,CAACZ,kBAAkB,CAACa,GAAG,CAACE,IAAI,CAAC,CAAC;EACxC,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZJ,QAAQ,CAACd,kBAAkB,CAAC,CAAC,CAAC;EAChC;AACF,CAAC;;AAED;AACA,OAAO,MAAMsB,WAAW,GAAG,MAAAA,CAAOC,EAAE,EAAET,QAAQ,KAAK;EACjDA,QAAQ,CAACR,gBAAgB,CAAC,CAAC,CAAC;EAC5B,IAAI;IACF,MAAMM,KAAK,CAACY,MAAM,CAAC,UAAU,GAAGD,EAAE,CAAC;IACnCT,QAAQ,CAACP,kBAAkB,CAACgB,EAAE,CAAC,CAAC;EAClC,CAAC,CAAC,OAAOL,GAAG,EAAE;IACZJ,QAAQ,CAACN,kBAAkB,CAAC,CAAC,CAAC;EAChC;AACF,CAAC;AACD;AACA,OAAO,MAAMiB,WAAW,GAAG,MAAAA,CAAOF,EAAE,EAAEG,YAAY,EAAEZ,QAAQ,KAAK;EAChEA,QAAQ,CAACL,gBAAgB,CAAC,CAAC,CAAC;EAC5B,IAAI;IACF,MAAMM,GAAG,GAAG,MAAMH,KAAK,CAACe,GAAG,CAAC,UAAU,GAAGJ,EAAE,EAAEG,YAAY,CAAC;IAC1DZ,QAAQ,CAACH,kBAAkB,CAACI,GAAG,CAACE,IAAI,CAAC,CAAC;EACxC,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZJ,QAAQ,CAACJ,kBAAkB,CAAC,CAAC,CAAC;EAChC;AACC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}